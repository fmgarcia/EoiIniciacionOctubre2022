package com.fran.htaxonomy.entidades;

// default package
// Generated 15 dic 2022 20:27:33 by Hibernate Tools 4.3.6.Final

import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Family generated by hbm2java
 */
@Entity
@Table(name = "family", catalog = "taxonomy")
public class Family implements java.io.Serializable {

	private static final long serialVersionUID = 1L;
	private Integer id;
	private String name;
	private Set<Species> specieses = new HashSet<Species>(0);

	public Family() {
	}

	public Family(String name) {
		this.name = name;
	}

	public Family(String name, Set<Species> specieses) {
		this.name = name;
		this.specieses = specieses;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Column(name = "name", nullable = false, length = 300)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "family")
	public Set<Species> getSpecieses() {
		return this.specieses;
	}

	public void setSpecieses(Set<Species> specieses) {
		this.specieses = specieses;
	}

	@Override
	public String toString() {
		String resultado = "";
			resultado += "id: " + id + " name=" + name + "\n";
			resultado += "Species:\n";
			for(Species specie: specieses) {
				resultado += specie.toString() + "\n";
			}	
		return resultado;
	}

	@Override
	public int hashCode() {
		return Objects.hash(id);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Family other = (Family) obj;
		return Objects.equals(id, other.id);
	}
	
	

}
